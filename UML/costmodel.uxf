<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=10
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>880</y>
      <w>440</w>
      <h>410</h>
    </coordinates>
    <panel_attributes>Topology
--
- NETWORK_TYPE: const NetworkType
- topo_graph: lemon::ListGraph
- topo_devs: lemon::ListGraph::NodeMap&lt;DevID&gt;
- topo_nodes: unordered_map&lt;DevID, lemon::ListGraph::Node&gt;
- topo_links: lemon::ListGraph::EdgeMap&lt;Link&gt;
- topo_edges: unordered_map&lt;LinkID, lemon::ListGraph::Edge&gt;

- reserveEdge(num_devices: unsigned int, type: NetworkType): void
--
+ &lt;&lt;constructor&gt;&gt; Topology(num_devices: const unsigned int, 
    type = PART_CONN_GRAPH: const NetworkType)
+ &lt;&lt;constructor&gt;&gt; Topology(num_devices: const unsigned int, dev_vec: const vector&lt;DevID&gt;&amp;, 
    type = PART_CONN_GRAPH: const NetworkType)
+ &lt;&lt;constructor&gt;&gt; Topology(num_devices: const unsigned int, old_topo: const Topology&amp;)
+ &lt;&lt;constructor&gt;&gt; Topology(num_devices: const unsigned int, old_topo: const Topology&amp;,
   type: const NetworkType)

+ getNetworkType(): NetworkType
+ getNumDevices(): unsigned int
+ getNumLinks(): unsigned int
+ addDevice(DEV_ID: const DevID): void
+ addDevice(DEV_VEC: const vector&lt;DevID&gt;&amp;): void
+ removeDevice(DEV_ID: const DevID): void
+ removeDevice(DEV_VEC: const vector&lt;DevID&gt;&amp;): void
+ setLink(IDA: const DevID, IDB: const DevID, link: Link): void
+ unsetLink(IDA: const DevID, IDB: const DevID): void
+ linkExists(IDA: const DevID, IDB: const DevID): bool
+ routeExists(IDA: const DevID, IDB: const DevID): bool
+ getMostDirectRoute(IDA: const DevID, IDB: const DevID): vector&lt;DevID&gt;
+ getLowestLatencyRoute(IDA: const DevID, IDB: const DevID): vector&lt;DevID&gt;
+ getHighestBWRoute(IDA: const DevID, IDB: const DevID): vector&lt;DevID&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>430</y>
      <w>880</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>BasicCostModel
--
+ &lt;&lt;constructor&gt;&gt; BasicCostModel(hw_info: const vector&lt;DevInfo&gt;&amp;)
+ &lt;&lt;constructor&gt;&gt; BasicCostModel(Hardware&amp; hw)

+ _accessCost(DEV_ID: const DevID, LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int, HARDWARE: const Hardware&amp;): Cost
+ _movementCost(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DevID, LAYOUT_DEST: const DataLayout&amp;,  hardware: Hardware&amp;): Cost</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>580</y>
      <w>290</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Device
--
_- next_id: DevID_
- ID: const DevID
- NAME: const string
- BAC: const Cost
- EAC: const Cost
- CAPACITY: const double
- VECTOR_LENGTH: const unsigned int
--
+ &lt;&lt;constructor&gt;&gt; Device(NULL: void*)
+ &lt;&lt;constructor&gt;&gt; Device(name: string, bac: Cost, eac: Cost, 
   cap: double, veclen: unsigned int)
+ &lt;&lt;constructor&gt;&gt; Device(source: const Device&amp;)
+ &lt;&lt;constructor&gt;&gt; Device(source: Device&amp;&amp;)

+ isNull(): bool
+ getID(): DevID
+ getName(): string 
+ getBasicAccessCost(N: const unsigned int): Cost
+ getExpensiveAccessCost(N: const unsigned int): Cost
+ getCapacity(): double
+ getVectorLength(): unsigned int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>580</y>
      <w>440</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>Hardware
--
- num_devices: unsigned int
- devices: vector&lt;Device&gt;
- topo: Topology
- NULLDEV: const Device

--
+ &lt;&lt;constructor&gt;&gt; Hardware(device_info: const vector&lt;DevInfo&gt;&amp;)
+ &lt;&lt;constructor&gt;&gt; Hardware(device_info: const vector&lt;DevInfo&gt;&amp;, net_type: NetworkType)
+ &lt;&lt;constructor&gt;&gt; Hardware(device_info: const vector&lt;DevInfo&gt;&amp;, old_hw: Hardware&amp;)
+ &lt;&lt;constructor&gt;&gt; Hardware(device_info: const vector&lt;DevInfo&gt;&amp;, old_hw: Hardware&amp;,
    net_type: NetworkType)

+ getDeviceName(DEV_ID: const DevID): string
+ getNumDevices(): unsigned int
+ getDevice(DEV_ID: const DevID): const Device&amp;
+ getDevices(): const vector&lt;Device&gt;&amp;
+ getTopology(): const Topology&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>1010</y>
      <w>290</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>Link
--
- link_id: LinkID
- latency: Cost
- inverse_bw: Cost
--
+ &lt;&lt;constructor&gt;&gt; Link()
+ &lt;&lt;constructor&gt;&gt; Link(lat: Cost, inverse_bw: Cost)

+ operator+=(RHS: const Link&amp;): Link&amp;
+ &lt;&lt;friend&gt;&gt; operator+(lhs: Link, RHS: const Link&amp;): Link
+ setLinkID(A: const DevID, B: const DevID): void
+ getLinkID(): LinkID
+ getLatency(): Cost
+ getInverseBW(): Cost</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>570</y>
      <w>360</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>Access
--
- PATTERN: const AccessPattern
- DATA_LAYOUT: const DataLayout
- COUNT: const unsigned int

- unrollAccessPattern(IN_PATTERN: const AccessPattern&amp;, 
  LAYOUT: const DataLayout&amp;): 
  const AccessPattern
--
+ &lt;&lt;constructor&gt;&gt; Access(PATT: AccessPattern&amp;, TYPE: const DataLayout&amp;, 
  count = 1: unsigned int)

+ getReps(): unsigned int
+ begin(): AccessPattern::const_iterator
+ end(): AccessPattern::const_iterator</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>140</x>
      <y>440</y>
      <w>160</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
NetworkType
--
PART_CONN_GRAPH
FULL_CONN_GRAPH
STAR
RING
CART
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>440</y>
      <w>110</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
AccessType
--
FREE
BASIC
EXPENSIVE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>840</y>
      <w>360</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>DataLayout
--
- NAME: const string
- EXTENT: const unsigned int
- PATTERN: const AccessPattern
--
+ &lt;&lt;constructor&gt;&gt; DataLayout(name: const string, extent: const unsigned int, 
  ap: const AccessPattern&amp;) 

+ getName(): string
+ getExtent(): unsigned int
+ getPattern(): const AccessPattern&amp; </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>100</y>
      <w>290</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
AccessPattern: 
vector&lt;tuple&lt;AccessType, unsigned int&gt;&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>860</x>
      <y>1010</y>
      <w>230</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Note

CostModel is an abstract class as _accessCost 
and _movementCost are pure virtual functions.
They MUST be overridden in derived classes. 

BasicCostModel implements these functions 
trivially.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>300</y>
      <w>290</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
LinkID: unsigned int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>180</y>
      <w>290</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
DevID: unsigned int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>510</y>
      <w>50</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1= 0..1
m2= 0..1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1110</x>
      <y>760</y>
      <w>50</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1= 1
m2= 0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>510</y>
      <w>60</w>
      <h>430</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=0..*
m2=0..1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;410.0;40.0;410.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1110</x>
      <y>510</y>
      <w>60</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>810</y>
      <w>40</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1= 1
m2= 1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>760</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1= 1..*
m2= 1</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>1130</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1= 1..*
m2= 1</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>240</y>
      <w>290</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
Cost: unsigned int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>360</y>
      <w>290</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
DevInfo: tuple&lt;std::string, Cost, Cost, 
double, unsigned int&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>100</y>
      <w>880</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>CostModel
--
# hardware: Hardware 
# known_data_layouts: unordered_map&lt;string, DataLayout&gt;

# defaultLayouts(): void
/# _accessCost(DEV_ID: const DevID, LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int, HW: const Hardware&amp;): Cost/
/# _movementCost(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DevID, LAYOUT_DEST: const DataLayout&amp;,  hw: Hardware&amp;): Cost/
--
+ &lt;&lt;constructor&gt;&gt; CostModel(hw_info: const vector&lt;DevInfo&gt;&amp;)
+ &lt;&lt;constructor&gt;&gt; CostModel(Hardware&amp; hw)

+ getHardware(): Hardware&amp;
+ addDataLayout(name: string, extent: unsigned int, ap: AccessPattern&amp;): void
+ rmDataLayout(name: string): void
+ getDataLayout(NAME: const string): const DataLayout&amp;
+ accessCost(DEV_ID: const DevID, LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int): Cost
+ accessCost(DEV_ID: const DevID, LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int, HW: const Hardware&amp;): Cost
+ movementCost(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DevID, LAYOUT_DEST: const DataLayout&amp;): Cost
+ movementCost(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DevID, LAYOUT_DEST: const DataLayout&amp;,  hw: Hardware&amp;): Cost
+ movementDecision(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int): bool
+ movementDecision(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int, hw: Hardware&amp;): bool
+ recommendDevice(LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int): DevID
+ recommendDevice(LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int, HW: const Hardware&amp;): DevID </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>770</x>
      <y>390</y>
      <w>30</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
</diagram>
