<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text/>
  <zoom_level>12</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>624</x>
      <y>948</y>
      <w>756</w>
      <h>624</h>
    </coordinates>
    <panel_attributes>Topology
--
- NETWORK_TYPE: const NetworkType
- topo_graph: lemon::ListGraph
- topo_devs: lemon::ListGraph::NodeMap&lt;DevID&gt;
- topo_nodes: unordered_map&lt;DevID, lemon::ListGraph::Node&gt;
- topo_links: lemon::ListGraph::EdgeMap&lt;Link&gt;
- topo_edges: unordered_map&lt;LinkID, lemon::ListGraph::Edge&gt;

- reserveEdge(num_devices: unsigned int, type: NetworkType): void
--
+ &lt;&lt;constructor&gt;&gt; Topology(num_devices: const unsigned int, 
    type = PART_CONN_GRAPH: const NetworkType)
+ &lt;&lt;constructor&gt;&gt; Topology(num_devices: const unsigned int, dev_vec: const vector&lt;DevID&gt;&amp;, 
    type = PART_CONN_GRAPH: const NetworkType)
+ &lt;&lt;constructor&gt;&gt; Topology(num_devices: const unsigned int, old_topo: const Topology&amp;)
+ &lt;&lt;constructor&gt;&gt; Topology(num_devices: const unsigned int, old_topo: const Topology&amp;,
   type: const NetworkType)

+ getNetworkType(): NetworkType
+ getNumDevices(): unsigned int
+ getNumLinks(): unsigned int
+ addDevice(DEV_ID: const DevID): void
+ addDevice(DEV_VEC: const vector&lt;DevID&gt;&amp;): void
+ removeDevice(DEV_ID: const DevID): void
+ removeDevice(DEV_VEC: const vector&lt;DevID&gt;&amp;): void
+ setLink(IDA: const DevID, IDB: const DevID, link: Link): void
+ unsetLink(IDA: const DevID, IDB: const DevID): void
+ linkExists(IDA: const DevID, IDB: const DevID): bool
+ routeExists(IDA: const DevID, IDB: const DevID): bool
+ getMostDirectRoute(IDA: const DevID, IDB: const DevID): vector&lt;DevID&gt;
+ getLowestLatencyRoute(IDA: const DevID, IDB: const DevID): vector&lt;DevID&gt;
+ getHighestBWRoute(IDA: const DevID, IDB: const DevID): vector&lt;DevID&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>540</x>
      <y>0</y>
      <w>1392</w>
      <h>432</h>
    </coordinates>
    <panel_attributes>BasicCostModel
--
# hardware: Hardware 
# known_data_layouts: map&lt;string, DataLayout&gt;

# defaultLayouts(): void
--
+ &lt;&lt;constructor&gt;&gt; BasicCostModel(hw_info: const vector&lt;DevInfo&gt;&amp;)
+ &lt;&lt;constructor&gt;&gt; BasicCostModel(Hardware&amp; hw)

+ getHardware(): Hardware&amp;
+ addDataLayout(name: string, extent: unsigned int, ap: AccessPattern&amp;): void
+ rmDataLayout(name: string): void
+ getDataLayout(NAME: const string): const DataLayout&amp;
+ accessCost(DEV_ID: const DevID, LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int): Cost
+ accessCost(DEV_ID: const DevID, LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int, HARDWARE: const Hardware&amp;): Cost
+ movementCost(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DevID, LAYOUT_DEST: const DataLayout&amp;): Cost
+ movementCost(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DevID, LAYOUT_DEST: const DataLayout&amp;,  hardware: Hardware&amp;): Cost
+ movementDecision(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int): bool
+ movementDecision(DEV_SRC: const DevID, LAYOUT_SRC: const DataLayout&amp;, DEV_DEST: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int, 
   hardware: Hardware&amp;): bool
+ recommendDevice(LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int): DevID
+ recommendDevice(LAYOUT: const DataLayout&amp;, AP: const AccessPattern&amp;, COUNT: const unsigned int, HARDWARE: const Hardware&amp;): DevID </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>12</x>
      <y>948</y>
      <w>552</w>
      <h>432</h>
    </coordinates>
    <panel_attributes>Device
--
_- next_id: DevID_
- ID: const DevID
- NAME: const string
- BAC: const Cost
- EAC: const Cost
- CAPACITY: const double
- VECTOR_LENGTH: const unsigned int
--
+ &lt;&lt;constructor&gt;&gt; Device(NULL: void*)
+ &lt;&lt;constructor&gt;&gt; Device(name: string, bac: Cost, eac: Cost, cap: double, 
veclen: unsigned int)
+ &lt;&lt;constructor&gt;&gt; Device(source: const Device&amp;)
+ &lt;&lt;constructor&gt;&gt; Device(source: Device&amp;&amp;)

+ isNull(): bool
+ getID(): DevID
+ getName(): string 
+ getBasicAccessCost(N: const unsigned int): Cost
+ getExpensiveAccessCost(N: const unsigned int): Cost
+ getCapacity(): double
+ getVectorLength(): unsigned int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>420</x>
      <y>504</y>
      <w>696</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>Hardware
--
- num_devices: unsigned int
- devices: vector&lt;Device&gt;
- topo: Topology
- NULLDEV: const Device

--
+ &lt;&lt;constructor&gt;&gt; Hardware(device_info: const vector&lt;DevInfo&gt;&amp;)
+ &lt;&lt;constructor&gt;&gt; Hardware(device_info: const vector&lt;DevInfo&gt;&amp;, net_type: NetworkType)
+ &lt;&lt;constructor&gt;&gt; Hardware(device_info: const vector&lt;DevInfo&gt;&amp;, old_hw: Hardware&amp;)
+ &lt;&lt;constructor&gt;&gt; Hardware(device_info: const vector&lt;DevInfo&gt;&amp;, old_hw: Hardware&amp;,
    net_type: NetworkType)

+ getDeviceName(DEV_ID: const DevID): string
+ getNumDevices(): unsigned int
+ getDevice(DEV_ID: const DevID): const Device&amp;
+ getDevices(): const vector&lt;Device&gt;&amp;
+ getTopology(): const Topology&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1632</x>
      <y>1188</y>
      <w>432</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>Link
--
- link_id: LinkID
- latency: Cost
- inverse_bw: Cost
--
+ &lt;&lt;constructor&gt;&gt; Link()
+ &lt;&lt;constructor&gt;&gt; Link(lat: Cost, inverse_bw: Cost)

+ operator+=(RHS: const Link&amp;): Link&amp;
+ &lt;&lt;friend&gt;&gt; operator+(lhs: Link, RHS: const Link&amp;): Link
+ setLinkID(A: const DevID, B: const DevID): void
+ getLinkID(): LinkID
+ getLatency(): Cost
+ getInverseBW(): Cost</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1632</x>
      <y>504</y>
      <w>780</w>
      <h>264</h>
    </coordinates>
    <panel_attributes>Access
--
- PATTERN: const AccessPattern
- DATA_LAYOUT: const DataLayout
- COUNT: const unsigned int

- unrollAccessPattern(IN_PATTERN: const AccessPattern&amp;, LAYOUT: const DataLayout&amp;): 
  const AccessPattern
--
+ &lt;&lt;constructor&gt;&gt; Access(PATT: AccessPattern&amp;, TYPE: const DataLayout&amp;, count = 1: unsigned int)

+ getReps(): unsigned int
+ begin(): AccessPattern::const_iterator
+ end(): AccessPattern::const_iterator</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>156</x>
      <y>408</y>
      <w>192</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
NetworkType
--
PART_CONN_GRAPH
FULL_CONN_GRAPH
STAR
RING
CART
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>12</x>
      <y>408</y>
      <w>132</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
AccessType
--
FREE
BASIC
EXPENSIVE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1632</x>
      <y>876</y>
      <w>792</w>
      <h>204</h>
    </coordinates>
    <panel_attributes>DataLayout
--
- NAME: const string
- EXTENT: const unsigned int
- PATTERN: const AccessPattern
--
+ &lt;&lt;constructor&gt;&gt; DataLayout(name: const string, extent: const unsigned int, ap: const AccessPattern&amp;) 

+ getName(): string
+ getExtent(): unsigned int
+ getPattern(): const AccessPattern&amp; </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>348</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
AccessPattern: 
vector&lt;tuple&lt;AccessType, unsigned int&gt;&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1968</x>
      <y>0</y>
      <w>384</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Note

BasicCostModel defines trivial responses to these 
queries.

It can be inherited from and query functions 
overridden as we see fit.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>240</y>
      <w>348</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
LinkID: unsigned int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>96</y>
      <w>348</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
DevID: unsigned int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>804</x>
      <y>420</y>
      <w>72</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1= 0..1
m2= 0..1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1932</x>
      <y>756</y>
      <w>60</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1= 1
m2= 0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1560</x>
      <y>420</y>
      <w>96</w>
      <h>576</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=0..*
m2=0..1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;450.0;60.0;450.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1884</x>
      <y>420</y>
      <w>84</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>852</y>
      <w>48</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1= 1
m2= 1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>456</x>
      <y>852</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1= 1..*
m2= 1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1368</x>
      <y>1332</y>
      <w>288</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1= 1..*
m2= 1</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>168</y>
      <w>348</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
Cost: unsigned int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>312</y>
      <w>348</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>&lt;&lt;typedef&gt;&gt;
DevInfo: tuple&lt;std::string, Cost, Cost, 
double, unsigned int&gt;</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
